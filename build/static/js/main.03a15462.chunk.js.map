{"version":3,"sources":["components/Home.jsx","components/ContactPage.jsx","components/About.jsx","components/CustomNavbar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","Container","Jumbotron","className","to","Button","bsStyle","React","Component","ContactPage","About","id","CustomNavbar","Navbar","default","collapseOnSelect","Brand","Image","src","style","height","width","marginLeft","color","textDecoration","Toggle","Collapse","Nav","pullLeft","NavItem","eventKey","componentClass","Link","href","marginRight","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qYAqBeA,G,6KAdX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,UACnB,sCACA,qFACA,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,gB,GAROC,IAAMC,YCSVC,G,6KATX,OACE,yBAAKN,UAAU,UACb,8CACA,6D,GALkBI,IAAMC,YCWjBE,G,6KATX,OACE,yBAAKP,UAAU,SAASQ,GAAG,aAA3B,2G,GAHcJ,IAAMC,Y,gCCqEXI,G,6KAjEX,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,kBAAgB,GAC9B,kBAACF,EAAA,EAAOG,MAAR,KACE,kBAACC,EAAA,EAAD,CACEC,IAAI,cACJf,UAAU,WACVgB,MAAO,CAAEC,OAAQ,OAAQC,MAAO,UAKlC,kBAAC,IAAD,CACEjB,GAAG,IACHe,MAAO,CACLG,WAAY,MACZC,MAAO,QACPC,eAAgB,SALpB,WAWF,kBAACX,EAAA,EAAOY,OAAR,MACA,kBAACZ,EAAA,EAAOa,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAQ,GACX,kBAACC,EAAA,EAAD,CACEC,SAAU,EACVC,eAAgBC,IAChBC,KAAK,IACL7B,GAAG,IACHe,MAAO,CAAEe,YAAa,SAEtB,kBAAC,IAAD,CAAM9B,GAAG,IAAIe,MAAO,CAAEI,MAAO,UAA7B,SAIF,kBAACM,EAAA,EAAD,CACEC,SAAU,EACVC,eAAgBC,IAChBC,KAAK,SACL7B,GAAG,SACHe,MAAO,CAAEe,YAAa,SAEtB,kBAAC,IAAD,CAAM9B,GAAG,SAASe,MAAO,CAAEI,MAAO,UAAlC,UAIF,kBAACM,EAAA,EAAD,CACEC,SAAU,EACVC,eAAgBC,IAChBC,KAAK,eACL7B,GAAG,eACHe,MAAO,CAAEe,YAAa,SAEtB,kBAAC,IAAD,CAAM9B,GAAG,eAAee,MAAO,CAAEI,MAAO,UAAxC,sB,GAxDahB,IAAMC,YCkBlB2B,E,uKAbX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,SAASC,UAAW5B,IAChC,kBAAC,IAAD,CAAO2B,KAAK,eAAeC,UAAW7B,U,GAR9BF,IAAMC,W,MCIJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03a15462.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron, Container, Row, Col, Image, Button } from \"react-bootstrap\";\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Jumbotron className=\"center\">\n          <h1>Airsip</h1>\n          <p>Making information accessible, digestible and personal</p>\n          <Link to=\"/about\">\n            <Button bsStyle=\"primary\">About</Button>\n          </Link>\n        </Jumbotron>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./ContactPage.css\";\n\nclass ContactPage extends React.Component {\n  render() {\n    return (\n      <div className=\"center\">\n        <h2>Contact us at:</h2>\n        <p>seansoohyunkwon@gmail.com</p>\n      </div>\n    );\n  }\n}\n\nexport default ContactPage;\n","import React from \"react\";\nimport \"./About.css\";\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div className=\"center\" id=\"aboutInfo\">\n        Airsip is a social media platform where you can crowdsource\n        video-answers to any questions you have\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Navbar, Nav, NavItem, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./CustomNavbar.css\";\n\nclass CustomNavbar extends React.Component {\n  render() {  \n    return (\n      <Navbar default collapseOnSelect>\n        <Navbar.Brand>\n          <Image\n            src=\"favicon.ico\"\n            className=\"logo-pic\"\n            style={{ height: \"22px\", width: \"22px\" }}\n          />\n          {/* <Row className=\"show-grid text-center\">\n            <Col xs={12} sm={4} className=\"pwerson-wrapper\"></Col>\n          </Row> */}\n          <Link\n            to=\"/\"\n            style={{\n              marginLeft: \"5px\",\n              color: \"white\",\n              textDecoration: \"none\",\n            }}\n          >\n            airsip\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav pullLeft>\n            <NavItem\n              eventKey={1}\n              componentClass={Link}\n              href=\"/\"\n              to=\"/\"\n              style={{ marginRight: \"15px\" }}\n            >\n              <Link to=\"/\" style={{ color: \"white\" }}>\n                Home\n              </Link>\n            </NavItem>\n            <NavItem\n              eventKey={2}\n              componentClass={Link}\n              href=\"/about\"\n              to=\"/about\"\n              style={{ marginRight: \"15px\" }}\n            >\n              <Link to=\"/about\" style={{ color: \"white\" }}>\n                About\n              </Link>\n            </NavItem>\n            <NavItem\n              eventKey={3}\n              componentClass={Link}\n              href=\"/contactpage\"\n              to=\"/contactpage\"\n              style={{ marginRight: \"15px\" }}\n            >\n              <Link to=\"/contactpage\" style={{ color: \"white\" }}>\n                Contact Us\n              </Link>\n            </NavItem>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default CustomNavbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport ContactPage from \"./components/ContactPage\";\nimport About from \"./components/About\";\nimport CustomNavbar from \"./components/CustomNavbar\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <CustomNavbar />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contactpage\" component={ContactPage} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}